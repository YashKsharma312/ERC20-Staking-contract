const{expect}=require("chai");
const { BigNumber, utils } = require("ethers");
describe("ERC20 Staking Contract",function(){
    let TestContract;
    let contract;
    let owner;
    let addr1;
    let addr2;
    let addr3;

    beforeEach(async function(){
        TestContract=await ethers.getContractFactory("StakingToken");
        [owner,addr1,addr2,addr3]=await ethers.getSigners();
        contract=await TestContract.deploy();
    });
    describe("Test contract", function () {
        it("Should set right owner",async function(){
        expect(await contract.owner()).to.equal(owner.address);})
        
        
        it("Should assign the total supply of token to the owner",async function(){
        expect(await contract.totalSupply()).to.equal(1000);});
        
        
        it("Should assign the real name of token",async function(){
        expect(await contract.name()).to.equal("Token");});
        
        
        it("Should assign the real symbol of token",async function(){
        expect(await contract.symbol()).to.equal("t1");});
        
        
        it("Should assign the real stakeholder",async function(){
        await contract.addStakeholder(addr1.address);
        await contract.addStakeholder(addr2.address);
        await contract.addStakeholder(addr3.address);
        const a=String(await contract.isStakeholder(addr1.address));
        expect(a).to.equal("true,0");
        const b=String(await contract.isStakeholder(addr2.address));
        expect(b).to.equal("true,1");
        const c=String(await contract.isStakeholder(addr3.address));
        expect(c).to.equal("true,2");
        });
        
        
        it("Should assign the stakes to stakeholder",async function(){ 
            await contract.createStake(100); 
            expect(await contract.stakeOf(owner.address)).to.equal(100);
            });
            
            
        it("Should calculate total stakes of contract ",async function(){ 
            await contract.createStake(100); 
            expect(await contract.totalStakes()).to.equal(100);
        })
        
        
        it("Should calculate reward ",async function(){ 
            await contract.createStake(100); 
            expect(await contract.calculateReward(owner.address)).to.equal(1);
    })
    
    
    it("Should calculate total reward ",async function(){ 
        await contract.createStake(100); 
        await contract.calculateReward(owner.address);
        await contract.distributeRewards();
        expect(await contract.totalRewards()).to.equal(1);
})
})
})
